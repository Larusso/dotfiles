#!/usr/bin/env zsh
#
# Bootstrap program for the dotfiles repository.
#

# Enable the default zsh options.
emulate zsh

setopt errexit      # exit the script if any statement returns a non-true valu
setopt pipefail     # unveil hidden pipeline command errors
setopt extendedglob # enable '#', '~', '^' operators and flags in patterns

# Deduce the path to the parent directory.
YADM_DIR="${0:h}"

# Detect the platform (similar to $OSTYPE)
OS="`uname`"
case $OS in
  'Linux')
    OS='Linux'
    ;;
  'WindowsNT')
    OS='Windows'
    ;;
  'Darwin') 
    OS='macOS'
    ;;
  *) ;;
esac

print -P "%F{green}::%f detected OS $OS"

pacman_packages=(
  alacritty
  awesome
  dmenu
  nerd-fonts-droid-sans-mono
  nvidia
  nvidia-settings
  openssh
  pacman-contrib
  picom-jonaburg-git
  rustup
  yadm
  zsh-theme-powerlevel10k-git
)

# Paths to repository configuration files.
: ${YADM_GITCONFIG:=$YADM_DIR/gitconfig}
: ${YADM_GITIGNORE:=$YADM_DIR/gitignore}
: ${YADM_UNSTABLE:=$YADM_DIR/unstable}

# Updating yadm repo origin URL
function update_yadm_repo_url {
  print -P "%F{blue}::%f update yadm repo URL ..."
  yadm remote set-url origin "git@github.com:Larusso/dotfiles.git"
}

# Pull submodules
function init_submodules {
  print -P "%F{blue}::%f init yadm submodules ..."
  cd "$HOME"
  yadm submodule update --recursive --init
}

# install homebrew if missing
function init_homebrew {
  print -P "%F{blue}::%f init homebrew ..."
  
  if ! command -v brew >/dev/null 2>&1; then
    print -P "%F{blue}::%f installing homebrew ..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

# install packages
function install_packages {
  if [ "$OS" = "macOS" ]; then
    if [ -f "${HOME}/.Brewfile" ]; then
      print -P "%F{green}::%f install packages with brew ..."
      brew bundle --global
    fi
  elif [ "$OS" = "Linux" ]; then
    print -P "%F(green)::%f install packages with pacman ..."
    yay -S --needed $pacman_packages
  fi
}

# setup iterm2 preference folder
function setup_iterm2 {
  print -P "%F{blue}::%f setting iTerm preference folder..."
  ITERM_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/iterm2"
  if [ -d  "$ITERM_CONFIG_DIR" ]; then
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$ITERM_CONFIG_DIR"
  else
    print -P "%F{yellow}:: [SKIP] iTerm preference directory $ITERM_CONFIG_DIR does not exist. %f"
  fi
}

# Create symlinks to shell runcoms in $HOME.
function bootstrap_xsh {
  print -P "%F{blue}::%f Linking shell runcoms to xsh runcoms..."

  # Source xsh with the appropriate configuration directory.
  XSH_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/shell"
  source "${XSH_DIR:-${XDG_CONFIG_HOME:-$HOME/.config}/xsh}/xsh.sh"

  # Bootstrap xsh for all supported shells.
  xsh bootstrap -s posix:bash:zsh >/dev/null
}

# Change the default login shell for the current user.
function change_login_shell {
  if [[ $(cat /etc/passwd | grep $USER) == *:/bin/zsh ]] {
    return
  }

  print -P "%F{green}::%f Changing the login shell to /bin/zsh"
  chsh $USER --shell=/bin/zsh
}

# Prompt the user to logout from the current session.
function prompt_logout {
  local ans session
  print -Pn "%F{green}::%f It is recommended to relogin using the new shell configuration, logout now? [Y/n] "
  read -sk ans; print
  [[ $ans != ('y'|$'\n') ]] && return

  session=$(loginctl session-status | head -n 1 | awk '{print $1}' || true)
  loginctl terminate-session $session
}

update_yadm_repo_url
init_submodules
if [ "$OS" = "macOS" ]; then
  init_homebrew
  setup_iterm2
fi

install_packages

if [ "$OS" = "Linux" ]; then
  bootstrap_xsh
  change_login_shell
  prompt_logout
fi
